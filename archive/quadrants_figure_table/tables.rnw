\documentclass{article}
\usepackage{graphicx} % Required for inserting images
\usepackage{authblk}
\usepackage{natbib}
\PassOptionsToPackage{hyphens}{url}
\usepackage[hidelinks]{hyperref}
\usepackage{doi}
\title{Tables for the paper: ``Biomedical Open Source Software:
  Crucial Packages and Hidden Heroes''} 
\author[1]{Andrew Nesbitt}
\author[2,3]{Boris Veytsman}
\author[4]{Daniel Mietchen}
\author[5]{Eva Maxfield Brown}
\author[6]{James Howison}
\author[7]{Jo√£o Felipe Pimentel}
\author[8]{Laurent H\'ebert-Dufresne}
\author[9]{Stephan Druskat}
\affil[1]{Ecosyste.ms}
\affil[2]{Chan Zuckerberg Initiative, Redwood City, CA 94063, USA}
\affil[3]{School of Systems Biology, George Mason University,
  Fairfax, VA 22030, USA}
\affil[4]{Ronin Institute for Independent Scholarship, Montclair, NJ 07043, USA}
\affil[5]{University of Washington}
\affil[6]{The University of Texas at Austin}
\affil[7]{Universidade Federal Fluminense}
\affil[8]{The University of Vermont}
\affil[9]{German Aerospace Center (DLR), 12489 Berlin, Germany}
\date{April 2024}

\begin{document}
\maketitle 

\section{Preliminaries}
\label{sec:prelim}



<<setup, message=F>>=
opts_chunk$set(fig.path="01_figures/", cache.lazy=F,
               cache=T, cache.path="01_cache/",
               linewidth=60
               )
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
  # this hook is used only when the linewidth option is not NULL
  if (!is.null(n <- options$linewidth)) {
    x = knitr:::split_lines(x)
    # any lines wider than n should be wrapped
    if (any(nchar(x) > n)) x = strwrap(x, width = n)
    x = paste(x, collapse = '\n')
  }
  hook_output(x, options)
})
library(tidyverse)
library(ggthemes)
library(ggrepel)
theme_set(theme_bw())
options(tikzDefaultEngine='luatex')
library(DescTools)
@ 

Some functions to print the results
<<print_head_tail>>=
print_head  <- function () {
    cat( 
        "\\begin{tabular}{llS[table-format=5]S[table-format=1.4]S[table-format=1.5]S[table-format=1.4]}
\\toprule
Software & Ecosystem & \\multicolumn{2}{c}{Mentions} & \\multicolumn{2}{c}{Centrality}\\\\
\\cmidrule{3-6}                  
         &     & {Count} & {Percentile} & {Value} & {Percentile}\\\\
\\midrule
"
)}
print_tail <- function () {
    cat(
        "\\bottomrule
\\end{tabular}"
)}
print_head()
print_tail()
@ 

Printing the rows
<<print_body>>=
print_body  <- function(tbl) {
    tbl %>% rowwise %>% group_walk( ~ {
        cat(Hmisc::latexTranslate(.x[['Id']]),
            Hmisc::latexTranslate(.x[['ecosystem']]),
            .x[['mentions_count']],
            round(.x[['mentions_percentile']], digits=4),
            round(.x[['centrality']], digits=5),
            round(.x[['centrality_percentile']], digits=4),
            sep=" & ")
        cat("\\\\\n")
        })}
@ 

Printing the quadrants

<<print_quadrants>>=
print_pasteur <- function(tbl, n=12) {
    cat("\\multicolumn{6}{c}{\\bfseries ``Pasteur''}\\\\\n")
    tbl %>% slice_max(n=n, order_by=mentions_percentile+centrality_percentile) %>%
        print_body()
}
print_popular <- function(tbl, n=12, cutoff=0.5) {
    cat("\\multicolumn{6}{c}{\\bfseries Popular}\\\\\n")
    tbl %>% filter(centrality_percentile<=cutoff) %>%
        slice_max(n=n, order_by=mentions_percentile) %>%
        print_body()
}
print_nebraska <- function(tbl, n=12, cutoff=0.5) {
    cat("\\multicolumn{6}{c}{\\bfseries ``Nebraska''}\\\\\n")
    tbl %>% filter(mentions_percentile<=cutoff) %>%
        slice_max(n=n, order_by=centrality_percentile) %>%
        print_body()
}
@ 


\section{Unweighted graph}
\label{sec:unweighted}



Calculation of Katz centrality is straightforward, but requires rather
large computing resources, so we precalculate it and stored in a csv
file.  We also stored there the information about the vertices of the
dependencies graph.  So now we need to read the data and merge them

<<printing_unweighted, message=F, echo=F>>=
mentions0 <- read_csv("mentions.csv.gz") %>%
    rename("ecosystem"="0",
           "czi_id"="1",
           "keywords"="2",
           "mentions_count"="3") %>%
    select(Id, ecosystem, mentions_count) 
centrality <- read_csv("centrality.csv.gz", 
                       col_names=c("Id", "centrality"))
mentions  <- mentions0 %>% left_join(centrality) %>%
    filter(ecosystem != 'paper' & !is.na(mentions_count) &
           !is.na(centrality)) %>%
        mutate(mentions_percentile=percent_rank(mentions_count),
           centrality_percentile=percent_rank(centrality))
print_head()
mentions %>% print_pasteur()
mentions %>% print_popular()
mentions %>% print_nebraska()
print_tail() 
@ 

\section{Weighted graph, full}

Same for weighed graph
<<printing_weighted, message=F, echo=F>>=
centrality_complete <- read_csv("centrality_weighted_network_complete.csv.gz", 
                       col_names=c("Id", "centrality"))
mentions_complete  <- mentions0 %>% left_join(centrality_complete) %>%
    filter(ecosystem != 'paper' & !is.na(mentions_count) &
           !is.na(centrality)) %>%
    mutate(mentions_percentile=percent_rank(mentions_count),
           centrality_percentile=percent_rank(centrality))

print_head()  
mentions_complete %>% print_pasteur()
mentions_complete %>% print_popular()
mentions_complete %>% print_nebraska()
print_tail() 
@ 

\section{Weighted graph, LCC}

Same for weighed graph
<<printing_weighted_LCC, message=F, echo=FALSE>>=
centrality_LCC <- read_csv("centrality_weighted_network_LCC.csv.gz", 
                       col_names=c("Id", "centrality"))
mentions_LCC  <- mentions0 %>% left_join(centrality_LCC) %>%
    filter(ecosystem != 'paper' & !is.na(mentions_count) &
           !is.na(centrality)) %>%
    mutate(mentions_percentile=percent_rank(mentions_count),
           centrality_percentile=percent_rank(centrality))

print_head()
mentions_LCC %>% print_pasteur()
mentions_LCC %>% print_popular()
mentions_LCC %>% print_nebraska()
print_tail() 
@ 


\section{Summary statistics}
\label{sec:summary}

<<print_summary_mentions>>=
ecosystems=mentions %>% distinct(ecosystem) %>% pull(ecosystem) %>%
sort()
walk(ecosystems, function (system) {
    counts  <- mentions %>% filter(ecosystem==system) %>%
        pull(mentions_count)
    zero_frac  <- sum(counts==0)/length(counts)
    
    result=c(system, median(counts), IQR(counts), max(counts), 
             Gini(counts),
             zero_frac)
    cat(result, sep = " & ")
    cat("\\\\\n")
    })

graphs <- list(mentions, mentions_complete, mentions_LCC)
walk(graphs, function(graph) {
    walk(ecosystems, function(system) {
        centrality <- graph %>% filter(ecosystem==system) %>%
            pull(centrality)
        result=c(system, median(centrality), IQR(centrality), 
                 max(centrality), 
                 Gini(centrality))
        cat(result, sep = " & ")
        cat("\\\\\n")
    })
    })

@ 


\end{document}
